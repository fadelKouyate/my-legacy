{"version":3,"sources":["views/Tools/Message/Message.js","config/Message.js","api/TripApi.js","views/Profile/DriverTrips/DriverTrips.js"],"names":["Message","message","time","cogoToast","info","Object","assign","options","hideAfter","error","success","loadingtime","loading","warn","position","TripApi","cov_trip","url","API_URL","WS_CREATE_TRIP","cov_trip_string","JSON","stringify","cov_tirp_json","parse","axios","post","then","res","catch","console","log","WS_UPDATE_TRIP","bookValues","WS_BOOK_TRIP","book_trip_string","book_tirp_json","responseBody","WS_BOOKING_VALIDATION","data","WS_CANCEL_BOOKING","cancel_booking_string","cancel_booking_json","WS_CANCEL_TRIP","cancel_trip_string","cancel_trip_json","driverEmail","WS_READ_DRIVER_TRIPS","get","WS_READ_PASSENGER_TRIPS","trip_from","trip_to","trip_date","trip_place","WS_SEARCH_TRIP","DriverTrips","props","state","modal","modalAction","profileModal","driverTrips","modalBodyMessage","updateTripModal","current_passenger","current_trip_hour","current_trip_amount","modalHeaderMessage","current_trip_reference","current_trip_description","current_passenger_email","toggle","bind","confirmModal","handleChange","toggleProfileModal","toggleUpdateTripModal","confirmUpdateTripModal","this","setState","passenger","user","trip","price","startHour","reference","description","trip_reference","passenger_email","action","cancelTrip","cancelBooking","refuseBooking","trip_hour","trip_amount","trip_comment","body","updateBody","updateTrip","response","setTimeout","window","location","reload","event","target","name","value","passengerEmail","driverResponse","trip_passenger","trip_driver_response","getResponseBody","bookingValidation","email","cancelBody","drvierEmail","cov_user","cov_mail","readDriverTrips","tripStartDate","Date","trips","sort","a","b","startDate","className","map","i","key","isClose","startCity","endCity","moment","format","onClick","showUpdateModal","showModal","length","src","picture","showProfilModal","fname","lname","status","validateBooking","isOpen","color","registerDate","type","onChange","React","Component","connect","token","auth","cov_trips"],"mappings":"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","file":"static/js/32.8c14f802.chunk.js","sourcesContent":["import cogoToast from 'cogo-toast';\r\nimport { MESSAGE_POSITION, HIDE_AFTER_DEFAULT, HIDE_AFTER_LOADING } from '../../../config/Message';\r\n\r\n\r\nclass Message {\r\n\r\n static options = { \r\n                  position: MESSAGE_POSITION,\r\n                  hideAfter: HIDE_AFTER_DEFAULT\r\n              }\r\n static info (message, time) {\r\n    return cogoToast.info(message, Object.assign(Message.options, { hideAfter:time }) )\r\n  }\r\n\r\n  static error (message, time) {\r\n    return cogoToast.error(message, Object.assign(Message.options, { hideAfter:time }) )\r\n  }\r\n\r\n  static success (message, time) {\r\n    return cogoToast.success(message, Object.assign(Message.options, { hideAfter:time }) )\r\n }\r\n\r\n  static loading (message, time) {\r\n    let loadingtime = time || HIDE_AFTER_LOADING\r\n    return cogoToast.loading(message, Object.assign(Message.options, { hideAfter:loadingtime }) )\r\n  }\r\n\r\n  static warn (message, time) {\r\n    return cogoToast.warn(message, Object.assign(Message.options, { hideAfter:time }) )\r\n  }\r\n\r\n}\r\n\r\nexport default Message\r\n","export const MESSAGE_POSITION = 'top-center' //top-left, top-center,top-right,bottom-left,bottom-left,bottom-right\r\nexport const HIDE_AFTER_DEFAULT = 3\r\nexport const HIDE_AFTER_LOADING = 1\r\n\r\n","import {API_URL, WS_CREATE_TRIP, WS_SEARCH_TRIP, WS_BOOK_TRIP, WS_READ_PASSENGER_TRIPS, \r\n\t    WS_READ_DRIVER_TRIPS, WS_BOOKING_VALIDATION, WS_CANCEL_BOOKING, WS_CANCEL_TRIP, WS_UPDATE_TRIP} from './url';\r\nimport axios from 'axios';\r\n\r\nclass TripApi{\r\n\r\n\tstatic createTrip(cov_trip) {\r\n\t\tlet url = API_URL + WS_CREATE_TRIP;\r\n\t\tlet cov_trip_string = JSON.stringify(cov_trip);\r\n\t\tlet cov_tirp_json = JSON.parse(cov_trip_string);\r\n\t\treturn axios.post(url, cov_tirp_json)\r\n\t\t\t\t\t.then(res => {\r\n\t\t\t\t\t\treturn res;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\tconsole.log(\"Error lors de la creation du trajet\");\r\n\t\t\t\t\t\tthrow(error)\r\n\t\t\t\t\t});\r\n\t}\r\n\r\n\tstatic updateTrip(cov_trip) {\r\n\t\tlet url = API_URL + WS_UPDATE_TRIP;\r\n\t\tlet cov_trip_string = JSON.stringify(cov_trip);\r\n\t\tlet cov_tirp_json = JSON.parse(cov_trip_string);\r\n\t\treturn axios.post(url, cov_tirp_json)\r\n\t\t\t\t\t.then(res => {\r\n\t\t\t\t\t\treturn res;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\tconsole.log(\"Error lors de la modification du trajet\");\r\n\t\t\t\t\t\tthrow(error)\r\n\t\t\t\t\t});\r\n\t}\r\n\r\n\tstatic bookTrip(bookValues){\r\n\t\tlet url = API_URL + WS_BOOK_TRIP; \r\n\t\tlet book_trip_string = JSON.stringify(bookValues);\r\n\t\tlet book_tirp_json = JSON.parse(book_trip_string);\r\n\t\treturn axios.post(url, book_tirp_json)\r\n\t\t\t\t\t.then(res => {\r\n\t\t\t\t\t\treturn res;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\tconsole.log(\"Error lors de la reservation du trajet\");\r\n\t\t\t\t\t\tthrow(error)\r\n\t\t\t\t\t});\r\n\t}\r\n\r\n\tstatic async bookingValidation(responseBody){\r\n\t\tlet url = API_URL + WS_BOOKING_VALIDATION; \r\n\t\tlet book_trip_string = JSON.stringify(responseBody);\r\n\t\tlet book_tirp_json = JSON.parse(book_trip_string);\r\n\t\ttry {\r\n\t\t\tconst res = await axios.post(url, book_tirp_json);\r\n\t\t\treturn res;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"Error lors de la validation de la reservation du trajet\");\r\n\t\t\tthrow (error);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic async cancelBooking(data){\r\n\t\tlet url = API_URL + WS_CANCEL_BOOKING;\r\n\t\tlet cancel_booking_string = JSON.stringify(data);\r\n\t\tlet cancel_booking_json = JSON.parse(cancel_booking_string);\r\n\t\ttry {\r\n\t\t\tconst res = await axios.post(url, cancel_booking_json);\r\n\t\t\treturn res;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"Error lors de l'annulation de la reservation\");\r\n\t\t\tthrow (error);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic async cancelTrip(data) {\r\n\t\tlet url = API_URL + WS_CANCEL_TRIP;\r\n\t\tlet cancel_trip_string = JSON.stringify(data);\r\n\t\tlet cancel_trip_json = JSON.parse(cancel_trip_string);\r\n\t\ttry {\r\n\t\t\tconst res = await axios.post(url, cancel_trip_json);\r\n\t\t\treturn res;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"Error lors de l'annulation du trajet\");\r\n\t\t\tthrow (error);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic async readDriverTrips(driverEmail){\r\n\t\t\tlet url = API_URL + WS_READ_DRIVER_TRIPS + \"?email=\" + driverEmail;\r\n\t\t\ttry {\r\n\t\t\t\tconst res = await axios.get(url);\r\n\t\t\t\treturn res;\r\n\t\t\t}\r\n\t\t\tcatch (error) {\r\n\t\t\t\tconsole.log(\"erreur lors de la recherche de trajet\" + error);\r\n\t\t\t\tthrow (error);\r\n\t\t\t}\r\n\t}\r\n\r\n\tstatic async readPassengerTrips(driverEmail){\r\n\t\tlet url = API_URL + WS_READ_PASSENGER_TRIPS + \"?email=\" + driverEmail;\r\n\t\ttry {\r\n\t\t\tconst res = await axios.get(url);\r\n\t\t\treturn res;\r\n\t\t}\r\n\t\tcatch (error) {\r\n\t\t\tconsole.log(\"erreur lors de la recherche de trajet\" + error);\r\n\t\t\tthrow (error);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic async searchTrips(trip_from, trip_to, trip_date, trip_place){\r\n\t\tlet url = API_URL + WS_SEARCH_TRIP + \"?trip_from=\" + trip_from + \"&trip_to=\" + trip_to \r\n\t\t\t\t\t\t  + \"&trip_date=\" + trip_date + \"&trip_place=\" + trip_place;\r\n\t\ttry {\r\n\t\t\tconst res = await axios.get(url);\r\n\t\t\treturn res;\r\n\t\t}\r\n\t\tcatch (error) {\r\n\t\t\tconsole.log(\"erreur lors de la recherche de trajet\" + error);\r\n\t\t\tthrow (error);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n  \r\nexport default TripApi;","import React from 'react'\r\nimport 'moment/locale/fr';\r\nimport moment from 'moment';\r\nimport { connect } from 'react-redux';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Message from '../../Tools/Message/Message'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AirportShuttleIcon from '@material-ui/icons/AirportShuttle';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport {Col, Row, Button, Input, Label, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap'\r\n\r\nimport './DriverTrips.css'\r\nimport TripApi from '../../../api/TripApi';\r\n\r\nclass DriverTrips extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { \r\n        modal: false,\r\n        modalAction: '',\r\n        profileModal: false,\r\n        driverTrips : [],\r\n        modalBodyMessage: '',\r\n        updateTripModal:false,\r\n        current_passenger: {},\r\n        current_trip_hour:'',\r\n        current_trip_amount:'',\r\n        modalHeaderMessage: '',\r\n        current_trip_reference: '',\r\n        current_trip_description:'',\r\n        current_passenger_email : ''\r\n    }\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.confirmModal = this.confirmModal.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.toggleProfileModal = this.toggleProfileModal.bind(this);\r\n    this.toggleUpdateTripModal = this.toggleUpdateTripModal.bind(this);\r\n    this.confirmUpdateTripModal = this.confirmUpdateTripModal.bind(this);\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      modal: !this.state.modal\r\n    });\r\n  }\r\n\r\n  toggleProfileModal(){\r\n    this.setState({\r\n      profileModal: !this.state.profileModal\r\n    });\r\n  }\r\n\r\n  toggleUpdateTripModal(){\r\n    this.setState({\r\n      updateTripModal: !this.state.updateTripModal\r\n    });\r\n  }\r\n\r\n  showProfilModal(passenger){\r\n    this.setState({\r\n      current_passenger: passenger.user\r\n    });\r\n\r\n    this.toggleProfileModal();\r\n  }\r\n\r\n  showUpdateModal(trip){\r\n      this.setState({\r\n        current_trip_amount: trip.price,\r\n        current_trip_hour : trip.startHour,\r\n        current_trip_reference: trip.reference,\r\n        current_trip_description: trip.description\r\n      });\r\n\r\n      this.toggleUpdateTripModal();\r\n  }\r\n\r\n  showModal(trip_reference, passenger_email, modalAction){\r\n    this.setState({\r\n      current_trip_reference: trip_reference,\r\n      current_passenger_email: passenger_email\r\n    });\r\n\r\n    if(modalAction === 'DELETE_TRIP'){\r\n      this.setState({\r\n        modalHeaderMessage:'Suppression',\r\n        modalBodyMessage: 'Voulez vous vraiment supprimer ce trajet?',\r\n        modalAction: modalAction\r\n      })\r\n    } else if(modalAction === 'CANCEL_BOOKING'){\r\n      this.setState({\r\n        modalHeaderMessage:'Annulation',\r\n        modalBodyMessage: 'Voulez vous vraiment annuler la réservation de ce passager?',\r\n        modalAction: modalAction\r\n      })\r\n    } else if(modalAction === 'REFUSE_BOOKING'){\r\n      this.setState({\r\n        modalHeaderMessage:'Refus',\r\n        modalBodyMessage: 'Voulez vous vraiment refuser la réservation de ce passager?',\r\n        modalAction: modalAction\r\n      })\r\n    }\r\n\r\n    this.toggle();\r\n  }\r\n\r\n  confirmModal(){\r\n      let action = this.state.modalAction;\r\n\r\n      if(action === 'DELETE_TRIP'){\r\n        this.cancelTrip(this.state.current_trip_reference);\r\n      } else if(action === 'CANCEL_BOOKING'){\r\n        this.cancelBooking(this.state.current_trip_reference, this.state.current_passenger_email);\r\n      }else if(action === 'REFUSE_BOOKING'){\r\n        this.refuseBooking(this.state.current_trip_reference, this.state.current_passenger_email);\r\n      }\r\n\r\n      this.toggle();\r\n  }\r\n\r\n  updateBody(){\r\n    return {\r\n        trip_reference : this.state.current_trip_reference,\r\n        trip_hour: this.state.current_trip_hour,\r\n        trip_amount: this.state.current_trip_amount,\r\n        trip_comment: this.state.current_trip_description\r\n    }\r\n  }\r\n\r\n  confirmUpdateTripModal(){\r\n      let body = this.updateBody();\r\n\r\n      TripApi.updateTrip(body)\r\n            .then((response) => {\r\n              Message.success('Modifications enregistrées avec succès', 2);\r\n              setTimeout(() => {\r\n                window.location.reload();\r\n              }, 2000);\r\n            }).catch(error => {\r\n                Message.error('Erreur technique: veuillez rééssayer plus tard', 2)\r\n                throw(error)\r\n            });\r\n      this.toggleUpdateTripModal();\r\n  }\r\n\r\n  handleChange(event) {\r\n    const {name, value} = event.target\r\n    this.setState({\r\n      [name]: value\r\n    })    \r\n  }\r\n\r\n  getResponseBody(trip_reference, passengerEmail, driverResponse){\r\n    return {\r\n        trip_reference : trip_reference,\r\n        trip_passenger: passengerEmail,\r\n        trip_driver_response: driverResponse,\r\n    }\r\n  }\r\n\r\n  refuseBooking(trip_reference, passenger_email){\r\n    let body = this.getResponseBody(trip_reference, passenger_email, \"REFUSE\")\r\n    TripApi.bookingValidation(body)\r\n            .then((response) => {\r\n                window.location.reload();\r\n            }).catch(error => {\r\n                throw(error)\r\n            });\r\n  }\r\n\r\n  validateBooking(trip_reference, passenger_email) {\r\n    let body = this.getResponseBody(trip_reference, passenger_email, \"VALIDE\")\r\n    TripApi.bookingValidation(body)\r\n            .then((response) => {\r\n              window.location.reload();\r\n            }).catch(error => {\r\n                throw(error)\r\n            });\r\n  }\r\n\r\n  cancelBody(trip_reference, email){\r\n    return {\r\n        trip_reference : trip_reference,\r\n        trip_passenger: email,\r\n    }\r\n  }\r\n\r\n  cancelBooking(trip_reference, passenger_email) {\r\n    let body = this.cancelBody(trip_reference, passenger_email)\r\n    TripApi.cancelBooking(body)\r\n            .then((response) => {\r\n              window.location.reload();\r\n            }).catch(error => {\r\n                throw(error)\r\n            });\r\n  }\r\n\r\n  cancelTrip(trip_reference){\r\n    let body = {trip_reference: trip_reference};\r\n    TripApi.cancelTrip(body)\r\n            .then((response) => {\r\n              window.location.reload();\r\n            }).catch(error => {\r\n                throw(error)\r\n            });\r\n  }\r\n\r\n  componentDidMount(){\r\n    let drvierEmail = this.props.cov_user.cov_mail\r\n    TripApi.readDriverTrips(drvierEmail)\r\n            .then((response) => {\r\n                this.setState({\r\n                  driverTrips : response.data\r\n                })\r\n            }).catch(error => {\r\n                throw(error)\r\n            });\r\n  }\r\n\r\n  isClose(tripStartDate){\r\n    var startDate = new Date(tripStartDate);\r\n    var now = new Date();\r\n\r\n    if(startDate < now){\r\n        return false;\r\n    }else{\r\n        return true;\r\n    }\r\n  }\r\n\r\n  render() {  \r\n    let trips = this.state.driverTrips;\r\n    trips.sort((a,b) => (a.startDate < b.startDate) ? 1 : -1);\r\n\r\n    return (\r\n      <div className=\"container driver-trip-content\">\r\n            {trips.map((trip, i) =>\r\n                <div key={i} className=\"trip-element\">\r\n                    {this.isClose(trip.startDate) ?\r\n                    <Row className=\"passenger-trip-status-open\"> <b> En cours </b></Row>\r\n                     :\r\n                     <Row className=\"passenger-trip-status-close\"> <b> Terminé </b></Row>\r\n                    } \r\n                    \r\n                    <Row className=\"driver-trip-header\">\r\n                      <Col className=\"col-8 col-sm-10\">\r\n                        <Row> {trip.startCity} <span>&nbsp; ...<AirportShuttleIcon/>...&nbsp; </span> {trip.endCity} </Row>\r\n                        <Row> Le {moment(trip.startDate, \"YYYY-MM-DD\").format(\"DD MMM YYYY\")} &nbsp;\r\n                              à {trip.startHour}\r\n                        </Row>\r\n                        <Row> Montant {trip.price}gnf </Row>\r\n                      </Col>\r\n                      <Col className=\"driver-trip-edit-icon col-2 col-sm-1\"> \r\n                        <EditIcon onClick={() => this.showUpdateModal(trip)}/> \r\n                      </Col>\r\n                      <Col className=\"col-2 col-sm-1 driver-trip-delete-icon\"> \r\n                        <DeleteIcon onClick={() => this.showModal(trip.reference , '', 'DELETE_TRIP')}/> \r\n                      </Col>\r\n                    </Row> \r\n\r\n                    <Row className=\"driver-trip-passenger-title\"> \r\n                          Liste des passagers de ce voyage\r\n                    </Row> \r\n\r\n                    {trip.passenger.length > 0 ?\r\n                      (                                            \r\n                        <Row className=\"driver-trip-body\">\r\n                          {trip.passenger.map((passenger, i) =>\r\n                            <Col key = {i} className=\"driver-trip-passenger col-12 col-sm-6\">\r\n                              <Row className=\"driver-trip-passenger-picture\">\r\n                              <Avatar className=\"driver-trip-passenger-avatar\"  \r\n                                      src={passenger.user.picture}\r\n                                      onClick={() => this.showProfilModal(passenger)}/>\r\n                              </Row>\r\n                              <Row className=\"driver-trip-passenger-name\">\r\n                                  {passenger.user.fname} {passenger.user.lname}\r\n                              </Row>\r\n                              <Row className=\"driver-trip-passenger-status\">\r\n                                  Statut: {passenger.status}<br/>\r\n                              </Row>\r\n                              <Row className=\"driver-trip-passenger-body\">\r\n                                  {passenger.status === 'VALIDE' ?\r\n                                      (\r\n                                        <Button className = \"driver-trip-cancel\"  onClick={() => this.showModal(trip.reference ,  passenger.user.email, 'CANCEL_BOOKING')}> Annuler</Button>\r\n                                      ):(\r\n                                      <Row>\r\n                                        <Col>\r\n                                          <Button className = \"driver-trip-accept\"  onClick={() => this.validateBooking(trip.reference, passenger.user.email)}> Accepter</Button>\r\n                                        </Col>\r\n                                        <Col>\r\n                                          <Button className = \"driver-trip-refuse\"  onClick={() => this.showModal(trip.reference ,  passenger.user.email, 'REFUSE_BOOKING')}> Refuser </Button>\r\n                                        </Col>\r\n                                      </Row>\r\n                                      )\r\n                                    }\r\n                              </Row>\r\n                            </Col>\r\n                            )}\r\n                        </Row>\r\n                      ):(\r\n                        <Row className=\"driver-trip-no-passenger\"> Vous n'avez pas encore de passager pour ce trajet...</Row>\r\n                      )}  \r\n                </div>\r\n            )}\r\n\r\n            <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n                <ModalHeader toggle={this.toggle}>\r\n                    {this.state.modalHeaderMessage}\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <b>{this.state.modalBodyMessage}</b>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                <Button color=\"primary\" onClick={this.confirmModal}>Oui</Button>{' '}                   \r\n                <Button color=\"secondary\" onClick={this.toggle}>Non</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n\r\n            <Modal isOpen={this.state.profileModal} toggle={this.toggleProfileModal}>\r\n                <ModalHeader toggle={this.toggleProfileModal}>\r\n                    <Avatar className=\"driver-trip-passenger-avatar\"  src={this.state.current_passenger.picture}/>\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <Row className=\"passenger-profil-name\">{this.state.current_passenger.fname} {this.state.current_passenger.lname}</Row>\r\n                    <Row className=\"passenger-profil-register\">Membre depuis : {moment(this.state.current_passenger.registerDate, \"dd/MM/yyy HH:mm:ss\").format(\"MMMM YYYY\")}</Row>\r\n                    <Row className=\"passenger-profil-email\">Email vérifié : Oui <CheckCircleOutlineIcon className=\"passenger-profil-check\"/> </Row>\r\n                    <Row className=\"passenger-profil-phone\">Numero vérifié: Oui <CheckCircleOutlineIcon className=\"passenger-profil-check\"/> </Row>\r\n                    <Row className=\"passenger-profil-description\">{this.state.current_passenger.description}</Row>\r\n                </ModalBody>\r\n                <ModalFooter>                 \r\n                <Button color=\"secondary\" onClick={this.toggleProfileModal}>Retour</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n\r\n            <Modal isOpen={this.state.updateTripModal} toggle={this.toggleUpdateTripModal}>\r\n                <ModalHeader toggle={this.toggleUpdateTripModal}>\r\n                      Modification du trajet\r\n                </ModalHeader>\r\n                <ModalBody className=\"update_trip_modal_body\">\r\n                    <Row className=\"\"> \r\n                      <Label className=\"detailLabel\">Heure de départ</Label>\r\n                      <Input type=\"time\" name=\"current_trip_hour\" value={this.state.current_trip_hour} className=\"trip_hour\" onChange={this.handleChange} />\r\n                    </Row>\r\n                    <Row className=\"\"> \r\n                      <Label className=\"detailLabel\">Montant</Label>\r\n                      <Input type=\"text\" name=\"current_trip_amount\" value={this.state.current_trip_amount} className=\"trip_amount\" onChange={this.handleChange} />\r\n                    </Row>\r\n                    <Row className=\"\"> \r\n                      <Label className=\"detailLabel\">Description</Label>\r\n                      <Input type=\"text\" name=\"current_trip_description\" value={this.state.current_trip_description} className=\"trip_description\" onChange={this.handleChange} />\r\n                    </Row>\r\n                </ModalBody>\r\n                <ModalFooter>                 \r\n                  <Button color=\"primary\" onClick={this.confirmUpdateTripModal}>Valider</Button>                  \r\n                  <Button color=\"secondary\" onClick={this.toggleUpdateTripModal}>Annuler</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    cov_user: state.cov_user,\r\n    token: state.auth.token,\r\n    cov_trips: state.cov_trips\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DriverTrips)"],"sourceRoot":""}