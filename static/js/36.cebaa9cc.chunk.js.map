{"version":3,"sources":["views/Tools/Message/Message.js","config/Message.js","views/Profile/Password/Change/Change.js"],"names":["Message","message","time","cogoToast","info","Object","assign","options","hideAfter","error","success","loadingtime","loading","warn","position","ChangePassword","props","state","cov_old_password","cov_password","cov_password_confirmer","errorStep","handleChange","bind","handleSubmit","toggle","event","target","name","value","this","setState","dispatch","UserActions","updatePassword","updateUserPassword","cov_user","token","then","history","push","catch","UserApi","handleError","HttpStatus","CONFLICT","preventDefault","check_new_password","UserUtils","checkValue","check_old_password","resultat","updateData","className","md","onSubmit","e","noValidate","addonType","type","placeholder","invalid","onChange","autoComplete","xs","color","Component","connect","auth"],"mappings":"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","file":"static/js/36.cebaa9cc.chunk.js","sourcesContent":["import cogoToast from 'cogo-toast';\r\nimport { MESSAGE_POSITION, HIDE_AFTER_DEFAULT, HIDE_AFTER_LOADING } from '../../../config/Message';\r\n\r\n\r\nclass Message {\r\n\r\n static options = { \r\n                  position: MESSAGE_POSITION,\r\n                  hideAfter: HIDE_AFTER_DEFAULT\r\n              }\r\n static info (message, time) {\r\n    return cogoToast.info(message, Object.assign(Message.options, { hideAfter:time }) )\r\n  }\r\n\r\n  static error (message, time) {\r\n    return cogoToast.error(message, Object.assign(Message.options, { hideAfter:time }) )\r\n  }\r\n\r\n  static success (message, time) {\r\n    return cogoToast.success(message, Object.assign(Message.options, { hideAfter:time }) )\r\n }\r\n\r\n  static loading (message, time) {\r\n    let loadingtime = time || HIDE_AFTER_LOADING\r\n    return cogoToast.loading(message, Object.assign(Message.options, { hideAfter:loadingtime }) )\r\n  }\r\n\r\n  static warn (message, time) {\r\n    return cogoToast.warn(message, Object.assign(Message.options, { hideAfter:time }) )\r\n  }\r\n\r\n}\r\n\r\nexport default Message\r\n","export const MESSAGE_POSITION = 'top-center' //top-left, top-center,top-right,bottom-left,bottom-left,bottom-right\r\nexport const HIDE_AFTER_DEFAULT = 3\r\nexport const HIDE_AFTER_LOADING = 1\r\n\r\n","import React, { Component } from 'react';\r\nimport {  Button, Card, CardBody, CardHeader, Col, Form, Input, InputGroup, InputGroupAddon, InputGroupText, Row, FormFeedback } from 'reactstrap';\r\nimport './Change.css'\r\nimport UserActions from '../../../../store/actions/UserActions'\r\nimport { connect } from 'react-redux'\r\nimport UserUtils from '../../../../utils/UserUtils'\r\nimport Message from '../../../Tools/Message'\r\nimport UserApi from '../../../../api/UserApi';\r\nimport HttpStatus  from 'http-status-codes';\r\n\r\nclass ChangePassword extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cov_old_password: '',\r\n      cov_password: '',\r\n      cov_password_confirmer: '',\r\n      error: false,\r\n      errorStep: -1,\r\n      message: '',\r\n    };\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n    this.toggle = this.toggle.bind(this)\r\n  }\r\n\r\n  handleChange(event) {\r\n    const {name, value} = event.target\r\n    this.setState({\r\n      [name]: value\r\n    })    \r\n  }\r\n\r\n  toggle() {\r\n    this.setState({ message:''});\r\n  }\r\n\r\n  async updateData() {\r\n    this.setState({error:false})\r\n    let {dispatch} = this.props\r\n    await dispatch(UserActions.updatePassword(this.state.cov_password))\r\n    dispatch(UserActions.updateUserPassword(this.props.cov_user, this.props.token))\r\n      .then(() => {\r\n          Message.loading().then(() => {\r\n              Message.success('Modifications enregistrées avec succès')\r\n                  this.props.history.push(\"/\")\r\n            });           \r\n      })\r\n      .catch((error) => {\r\n        let codeError = UserApi.handleError(error)\r\n        switch(codeError) {\r\n          case HttpStatus.CONFLICT:\r\n           Message.error('Veuillez choisir un mot de passe différent de votre ancien mot de passe');\r\n            break;\r\n           default:\r\n             Message.error('Connexion impossible veuillez réessayer plus tard');\r\n           }         \r\n      }) \r\n  }\r\n\r\n  handleSubmit(event){\r\n    event.preventDefault()\r\n    let { cov_password_confirmer, cov_password, cov_old_password } = this.state\r\n\r\n    if (cov_password !== cov_password_confirmer) {\r\n      this.setState({error:true, message:'Erreur mots de passe différents' })\r\n      return;\r\n    }\r\n\r\n    let check_new_password = UserUtils.checkValue('cov_password', cov_password)\r\n\r\n    let check_old_password = UserUtils.checkValue('cov_password', cov_old_password)\r\n\r\n    if ( ! check_old_password.resultat) {\r\n      this.setState({error:true, errorStep:1, message: check_old_password.message})\r\n    }\r\n    else if ( ! check_new_password.resultat) {\r\n      this.setState({error:true, errorStep:2, message: check_new_password.message})\r\n    }\r\n    else {\r\n         this.updateData()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let {  message, error, cov_password_confirmer, cov_password, cov_old_password, errorStep } = this.state\r\n    return (\r\n      <div className=\"profile-change-passwowrd\">\r\n        <Row className=\"justify-content-center\" >\r\n            <Col md=\"4\">\r\n                  <Card>\r\n                  <CardHeader>\r\n                  <span className=\"profile-title\">Mise à jour du mot de passe</span>\r\n                  </CardHeader>\r\n                  <CardBody>\r\n                      <Form onSubmit={ (e) => this.handleSubmit(e) } noValidate>\r\n                      <InputGroup className=\"mb-3\">\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                          <InputGroupText>\r\n                          <i className=\"icon-lock\"></i>\r\n                          </InputGroupText>\r\n                        </InputGroupAddon>\r\n                        \r\n                        <Input \r\n                            type=\"password\" \r\n                            placeholder=\"Ancien mot de passe\" \r\n                            value={cov_old_password} \r\n                            name=\"cov_old_password\" \r\n                            invalid={ error && errorStep===1} \r\n                            onChange={this.handleChange} \r\n                            autoComplete=\"email\"\r\n                        />\r\n                         <FormFeedback> {message} </FormFeedback>\r\n                        </InputGroup>\r\n                        <InputGroup className=\"mb-3\">\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                          <InputGroupText>\r\n                          <i className=\"icon-lock\"></i>\r\n                          </InputGroupText>\r\n                        </InputGroupAddon>\r\n                        \r\n                        <Input \r\n                            type=\"password\" \r\n                            placeholder=\"Nouveau mot de passe\" \r\n                            value={cov_password} \r\n                            name=\"cov_password\" \r\n                            invalid={ error && errorStep===2} \r\n                            onChange={this.handleChange} \r\n                            autoComplete=\"email\"\r\n                        />\r\n                        </InputGroup>\r\n                        <InputGroup className=\"mb-4\">\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                          <InputGroupText>\r\n                          <i className=\"icon-lock\"></i>\r\n                          </InputGroupText>\r\n                        </InputGroupAddon>\r\n                        <Input \r\n                            type=\"password\" \r\n                            placeholder=\"confirmation\" \r\n                            value={cov_password_confirmer} \r\n                            name=\"cov_password_confirmer\" \r\n                            invalid={error && errorStep === 2} \r\n                            onChange={this.handleChange} \r\n                            autoComplete=\"password\"\r\n                        />\r\n                       <FormFeedback> {message} </FormFeedback>\r\n                        </InputGroup>\r\n                        <Row className=\"justify-content-center\">\r\n                        <Col xs=\"4\">\r\n                          <Button color=\"primary\" className=\"px-4\">Valider</Button>\r\n                        </Col>\r\n                        </Row>\r\n                      </Form>\r\n                  </CardBody>\r\n                  </Card>\r\n              </Col>\r\n          </Row>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      cov_user: state.cov_user,\r\n      token: state.auth.token\r\n  }\r\n} \r\n\r\nexport default connect(mapStateToProps)(ChangePassword)\r\n"],"sourceRoot":""}