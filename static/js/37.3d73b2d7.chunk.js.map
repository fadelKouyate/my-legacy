{"version":3,"sources":["views/Tools/Message/Message.js","config/Message.js","views/Profile/Password/Init/Init.js"],"names":["Message","message","time","cogoToast","info","Object","assign","options","hideAfter","error","success","loadingtime","loading","warn","position","Init","props","state","cov_password","cov_password_confirmer","token","handleChange","bind","handleSubmit","toggle","event","target","name","value","console","log","this","setState","queryString","parse","location","search","history","push","dispatch","UserActions","updatePassword","initPassword","cov_user","then","UserUtils","sleep","catch","preventDefault","check_password","checkValue","resultat","updateData","className","md","onSubmit","e","noValidate","addonType","type","placeholder","invalid","onChange","autoComplete","xs","onClick","color","Component","connect","auth"],"mappings":"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","file":"static/js/37.3d73b2d7.chunk.js","sourcesContent":["import cogoToast from 'cogo-toast';\r\nimport { MESSAGE_POSITION, HIDE_AFTER_DEFAULT, HIDE_AFTER_LOADING } from '../../../config/Message';\r\n\r\n\r\nclass Message {\r\n\r\n static options = { \r\n                  position: MESSAGE_POSITION,\r\n                  hideAfter: HIDE_AFTER_DEFAULT\r\n              }\r\n static info (message, time) {\r\n    return cogoToast.info(message, Object.assign(Message.options, { hideAfter:time }) )\r\n  }\r\n\r\n  static error (message, time) {\r\n    return cogoToast.error(message, Object.assign(Message.options, { hideAfter:time }) )\r\n  }\r\n\r\n  static success (message, time) {\r\n    return cogoToast.success(message, Object.assign(Message.options, { hideAfter:time }) )\r\n }\r\n\r\n  static loading (message, time) {\r\n    let loadingtime = time || HIDE_AFTER_LOADING\r\n    return cogoToast.loading(message, Object.assign(Message.options, { hideAfter:loadingtime }) )\r\n  }\r\n\r\n  static warn (message, time) {\r\n    return cogoToast.warn(message, Object.assign(Message.options, { hideAfter:time }) )\r\n  }\r\n\r\n}\r\n\r\nexport default Message\r\n","export const MESSAGE_POSITION = 'top-center' //top-left, top-center,top-right,bottom-left,bottom-left,bottom-right\r\nexport const HIDE_AFTER_DEFAULT = 3\r\nexport const HIDE_AFTER_LOADING = 1\r\n\r\n","import React, { Component } from 'react';\r\nimport {  Button, Card, CardBody, CardHeader, Col, Container, Form, Input, InputGroup, InputGroupAddon, InputGroupText, Row, FormFeedback } from 'reactstrap';\r\nimport './Init.css'\r\nimport UserActions from '../../../../store/actions/UserActions'\r\nimport { connect } from 'react-redux'\r\nimport UserUtils from '../../../../utils/UserUtils'\r\nimport queryString from 'query-string'\r\nimport Message from '../../../Tools/Message'\r\n\r\nclass Init extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cov_password: '',\r\n      cov_password_confirmer: '',\r\n      error: false,\r\n      message: '',\r\n      token:''\r\n    };\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n    this.toggle = this.toggle.bind(this)\r\n  }\r\n\r\n  handleChange(event) {\r\n    const {name, value} = event.target;\r\n    console.log(value);\r\n    this.setState({\r\n      [name]: value\r\n    })    \r\n  }\r\n\r\n  toggle() {\r\n    this.setState({ error: false});\r\n  }\r\n\r\n  componentDidMount() {\r\n    const values = queryString.parse(this.props.location.search)\r\n    let token = values.token\r\n    if (!token)     \r\n        this.props.history.push(\"/\")\r\n    this.setState({token: token})\r\n  }\r\n\r\n  goHome() {\r\n    this.props.history.push(\"/\")\r\n  }\r\n\r\n  async updateData() {\r\n    let {dispatch} = this.props\r\n    await dispatch(UserActions.updatePassword(this.state.cov_password))\r\n    dispatch(UserActions.initPassword(this.props.cov_user, this.state.token))\r\n        .then(() => {\r\n          Message.success('Modifications enregistrées avec succès')\r\n            UserUtils.sleep(1).then(()=> {\r\n                this.props.history.push(\"/\")\r\n            })\r\n        })\r\n        .catch((error) => {\r\n          Message.success('Modifications enregistrées avec succès')\r\n            UserUtils.sleep(1).then(()=> {\r\n                this.props.history.push(\"/\")\r\n            })\r\n        }) \r\n  }\r\n\r\n  handleSubmit(event){\r\n    event.preventDefault()\r\n\r\n    let { cov_password, cov_password_confirmer } = this.state\r\n\r\n    if (cov_password !== cov_password_confirmer) {\r\n      this.setState({error:true, message:'Erreur mots de passe différents' })\r\n      return;\r\n    }\r\n\r\n    let check_password = UserUtils.checkValue('cov_password', cov_password)\r\n\r\n    if ( ! check_password.resultat) {\r\n      this.setState({error:true, message: check_password.message})\r\n    }\r\n    else {\r\n         this.updateData()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let {  error, cov_password_confirmer, cov_password, message } = this.state\r\n    return (\r\n      <div className=\"login\">\r\n      <Container> \r\n        <br />\r\n        {\r\n          !error ? <br />: ''\r\n        }\r\n      <Row className=\"justify-content-center\"> \r\n        <Col md=\"8\">\r\n          </Col>\r\n      </Row>\r\n      <Row className=\"justify-content-center\" >\r\n          <Col md=\"5\">\r\n                <Card>\r\n                <CardHeader>\r\n                <strong>Initialisation du mot de passe</strong>\r\n                </CardHeader>\r\n                <CardBody>\r\n                    <Form onSubmit={ (e) => this.handleSubmit(e) } noValidate>\r\n\r\n                      <InputGroup className=\"mb-3\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>\r\n                        <i className=\"icon-lock\"></i>\r\n                        </InputGroupText>\r\n                      </InputGroupAddon>\r\n                      \r\n                      <Input \r\n                          type=\"password\" \r\n                          placeholder=\"mot de passe\" \r\n                          value={cov_password} \r\n                          name=\"cov_password\" \r\n                          invalid={ error} \r\n                          onChange={this.handleChange} \r\n                          autoComplete=\"password\"\r\n                      />\r\n                       <FormFeedback> {message} </FormFeedback>\r\n                      </InputGroup>\r\n                      <InputGroup className=\"mb-4\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>\r\n                        <i className=\"icon-lock\"></i>\r\n                        </InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input \r\n                          type=\"password\" \r\n                          placeholder=\"confirmation\" \r\n                          value={cov_password_confirmer} \r\n                          name=\"cov_password_confirmer\" \r\n                          invalid={error} \r\n                          onChange={this.handleChange} \r\n                          autoComplete=\"password\"\r\n                      />\r\n                       <FormFeedback> {message} </FormFeedback>\r\n                      </InputGroup>\r\n                      <Row className=\"justify-content-center\">\r\n                      <Col xs=\"4\">\r\n                        <Button onClick={this.handleSubmit} color=\"primary\" className=\"px-4\">valider</Button>\r\n                      </Col>\r\n                    </Row>\r\n                    </Form>\r\n                </CardBody>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n\r\n        </Container>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      cov_user: state.cov_user,\r\n      token: state.auth.token\r\n    } \r\n}\r\n\r\nexport default connect(mapStateToProps)(Init)\r\n"],"sourceRoot":""}