{"version":3,"sources":["store/actions/actionTypes.js","polyfill.js","store/transforms/EncryptTransform.js","store/initialState.js","store/reducers/UserReducer.js","store/configureStore.js","App.js","serviceWorker.js","index.js"],"names":["CONNECT","UPDATE_USER_INFO","UPDATE_USER","INIT_STATE","UPDATE_LAST_ACTION","SET_PATHNAME","SET_TRIPS","SET_CURRENT_TRIP","SET_TRIP_DESIRED_PLACE","window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","EncryptTranform","createTransform","inboundState","key","CryptoJS","AES","encrypt","JSON","stringify","toString","outboundState","decrypted","decrypt","enc","Utf8","parse","auth","logged","token","cov_user","cov_mail","cov_first_name","cov_last_name","cov_birth","cov_gender","cov_password","cov_phone","cov_city","cov_picture","cov_description","action_date","pathname","cov_trips","cov_current_trip","cov_trip_placeDesired","loginReducer","state","initialState","action","console","log","type","types","name","value","Date","now","persistConfig","storage","Asyncstorage","stateReconciler","autoMergeLevel2","transforms","EncryptTransform","pReducer","persistReducer","UserReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","DefaultLayout","React","lazy","App","Suspense","fallback","className","path","render","props","Component","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c19db0cf.chunk.js","sourcesContent":["// USER ACTION TYPES\r\nexport const CONNECT = 'CONNECT'\r\nexport const SET_TOKEN = 'SET_TOKEN'\r\nexport const UPDATE_USER_INFO = 'UPDATE_USER_INFO'\r\nexport const SAVE_USER = 'SAVE_USER'\r\nexport const UPDATE_USER = 'UPDATE_USER'\r\nexport const INIT_STATE = 'INIT_STATE'\r\nexport const UPDATE_LAST_ACTION = 'UPDATE_LAST_ACTION'\r\nexport const SET_PATHNAME = 'SET_PATHNAME'\r\n\r\n// TRIP ACTION TYPES\r\nexport const SAVE_TRIP = 'SAVE_TRIP'\r\nexport const SET_TRIPS = 'SET_TRIPS'\r\nexport const SET_CURRENT_TRIP = 'SET_CURRENT_TRIP'\r\nexport const SET_TRIP_DESIRED_PLACE = 'SET_TRIP_DESIRED_PLACE'\r\nexport const READ_DRIVER_TRIPS = '';","/*\r\n* required polyfills\r\n*/\r\nimport \"core-js\";\r\nimport 'core-js/features/set/map';\r\n\r\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\r\n// import 'core-js/es/symbol'\r\n// import 'core-js/es/object'\r\n// import 'core-js/es/function'\r\n// import 'core-js/es/parse-int'\r\n// import 'core-js/es/parse-float'\r\n// import 'core-js/es/number'\r\n// import 'core-js/es/math'\r\n// import 'core-js/es/string'\r\n// import 'core-js/es/date'\r\n// import 'core-js/es/array'\r\n// import 'core-js/es/regexp'\r\n// import 'core-js/es/map'\r\n// import 'core-js/es/weak-map'\r\n// import 'core-js/es/set'\r\n// import 'core-js/es/object'\r\n\r\n/** IE10 and IE11 requires the following for the Reflect API. */\r\n// import 'core-js/es/reflect'\r\n\r\n/** Evergreen browsers require these. **/\r\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\r\n// import 'core-js/es/reflect'\r\n\r\n// CustomEvent() constructor functionality in IE9, IE10, IE11\r\n(function () {\r\n\r\n  if ( typeof window.CustomEvent === \"function\" ) return false\r\n\r\n  function CustomEvent ( event, params ) {\r\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\r\n    var evt = document.createEvent( 'CustomEvent' )\r\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail )\r\n    return evt\r\n  }\r\n\r\n  CustomEvent.prototype = window.Event.prototype\r\n\r\n  window.CustomEvent = CustomEvent\r\n})()\r\n","import { createTransform } from 'redux-persist';\r\nimport CryptoJS from 'crypto-js';\r\n\r\nconst secretKey = 'ousmane@fadjimba'\r\nconst EncryptTranform = createTransform(\r\n    (inboundState, key) => {\r\n      if (!inboundState) return inboundState;\r\n      const cryptedText = CryptoJS.AES.encrypt(JSON.stringify(inboundState), secretKey);\r\n  \r\n      return cryptedText.toString(); \r\n    },\r\n    (outboundState, key) => {\r\n      if (!outboundState) return outboundState;\r\n      const bytes = CryptoJS.AES.decrypt(outboundState, secretKey);\r\n      const decrypted = bytes.toString(CryptoJS.enc.Utf8);\r\n  \r\n      return JSON.parse(decrypted);\r\n    },\r\n  );\r\n\r\n  export default EncryptTranform\r\n\r\n\r\n\r\n","export default { \r\n\r\n        auth: { \r\n            logged: false,\r\n            token: ''\r\n        },\r\n\r\n        cov_user : {\r\n            cov_mail : '',\r\n            cov_first_name : '',\r\n            cov_last_name : '',\r\n            cov_birth : '',\r\n            cov_gender : '',\r\n            cov_password : '',\r\n            cov_phone : '',\r\n            cov_city : '',\r\n            cov_picture : '',\r\n            cov_description : ''\r\n        },\r\n\r\n        action_date: '',\r\n        pathname: '',\r\n        cov_trips : [],\r\n        cov_current_trip : '',\r\n        cov_trip_placeDesired: '',\r\n}\r\n","import * as types from '../actions/actionTypes';  \r\nimport initialState from '../initialState';\r\n\r\nfunction loginReducer(state = initialState, action) {\r\n  console.log(\"action \",action)\r\n  let nextState = {}\r\n  switch (action.type) {\r\n        \r\n    case types.UPDATE_USER_INFO:\r\n        var name = action.name\r\n        var value = action.value\r\n        var cov_user = {...state.cov_user } \r\n        cov_user[name] = value\r\n        nextState = {\r\n          ...state,\r\n          cov_user : cov_user\r\n        }\r\n      return nextState || state\r\n\r\n      case types.UPDATE_USER:\r\n        nextState = {\r\n          ...state,\r\n          cov_user : action.value\r\n        }\r\n      return nextState || state\r\n\r\n      case types.CONNECT:\r\n        nextState = {\r\n          ...state,\r\n          auth : {logged: true, token: action.token },\r\n          cov_user : action.value\r\n        }\r\n      return nextState || state\r\n\r\n      case types.INIT_STATE:\r\n      return initialState\r\n\r\n      case types.UPDATE_LAST_ACTION:\r\n        nextState = {\r\n          ...state,\r\n          action_date : Date.now()\r\n        }\r\n      return nextState || state\r\n\r\n      case types.SET_PATHNAME:\r\n        nextState = {\r\n          ...state,\r\n          pathname : action.value\r\n        }\r\n      return nextState || state\r\n\r\n      case types.SET_TRIPS:\r\n        nextState = {\r\n          ...state,\r\n          cov_trips : action.value\r\n        }\r\n      return nextState || state\r\n\r\n      case types.SET_CURRENT_TRIP:\r\n        nextState = {\r\n           ...state,\r\n           cov_current_trip : action.value\r\n        }\r\n      return nextState || state\r\n\r\n      case types.SET_TRIP_DESIRED_PLACE:\r\n        nextState = {\r\n           ...state,\r\n           cov_trip_placeDesired : action.value\r\n        }\r\n      return nextState || state\r\n\r\n  default:\r\n    return state\r\n  }\r\n}\r\n\r\nexport default loginReducer","\r\nimport { createStore, applyMiddleware} from 'redux';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport Asyncstorage from 'redux-persist/lib/storage';\r\nimport EncryptTransform from './transforms/EncryptTransform';\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport UserReducer from './reducers/UserReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\n\r\n\r\nconst persistConfig = {\r\n key: 'root',\r\n storage: Asyncstorage,\r\n stateReconciler: autoMergeLevel2, // see \"Merge Process\" section for details.\r\n //blacklist: ['cov_user']\r\n transforms: [EncryptTransform]\r\n};\r\n\r\n/*const reducers = combineReducers({\r\n    user: UserReducer,\r\n    trip: TripReducer\r\n  })\r\n*/\r\nconst pReducer = persistReducer(persistConfig, UserReducer);\r\n\r\nexport const store = createStore(pReducer, applyMiddleware(thunk));\r\nexport const persistor = persistStore(store);","import React, { Component } from 'react';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\n// import { renderRoutes } from 'react-router-config';\r\nimport './App.scss';\r\nimport {store, persistor}  from './store/configureStore'\r\nimport { PersistGate } from 'redux-persist/lib/integration/react'\r\nimport { Provider } from 'react-redux'\r\n\r\nconst loading = () => <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>;\r\n\r\n// Containers\r\nconst DefaultLayout = React.lazy(() => import('./containers/DefaultLayout'));\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <PersistGate persistor={persistor}>\r\n          <HashRouter>\r\n              <React.Suspense fallback={loading()}>\r\n                <Switch>\r\n                  <Route path=\"/\" name=\"Home\" render={props => <DefaultLayout {...props}/>} />\r\n                </Switch>\r\n              </React.Suspense>\r\n          </HashRouter>\r\n          </PersistGate>\r\n       </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'react-app-polyfill/ie9'; // For IE 9-11 support\r\nimport 'react-app-polyfill/stable';\r\n// import 'react-app-polyfill/ie11'; // For IE 11 support\r\nimport './polyfill'\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}